#include <stdio.h>
int createsparse(int a[10][10], int b[10][10], int r, int c) {
    int i, j;
    b[0][0] = r;
    b[0][1] = c;
    int n = 0, k = 1;
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            if (a[i][j] != 0) {
                b[k][0] = i;
                b[k][1] = j;
                b[k][2] = a[i][j];
                k++;
                n++;
            }
        }
    }
    b[0][2] = n;
    return k;
}

void creatematrix(int a[10][10], int r, int c) {
    int i, j;
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf("Element found at %d%d: ", i + 1, j + 1);
            scanf("%d", &a[i][j]);
        }
    }
}

void displaymatrix(int a[10][10], int r, int c) {
    int i, j;
    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++) {
            printf("%d\t", a[i][j]);
        }
        printf("\n");
    }
}

int sparseadd(int s1[10][10], int s2[10][10], int r[10][10]) {
    int i = 1, j = 1, k = 1, sum;
    if (s1[0][0] == s2[0][0] && s1[0][1] == s2[0][1]) {
        r[0][0] = s1[0][0];
        r[0][1] = s1[0][1];
        while (i <= s1[0][2] && j <= s2[0][2]) {
            if (s1[i][0] == s2[j][0]) {
                if (s1[i][1] == s2[j][1]) {
                    sum = s1[i][2] + s2[j][2];
                    if (sum != 0) {
                        r[k][0] = s1[i][0];
                        r[k][1] = s1[i][1];
                        r[k][2] = sum;
                        k++;
                    }
                    i++;
                    j++;
                } else if (s1[i][1] < s2[j][1]) {
                    r[k][0] = s1[i][0];
                    r[k][1] = s1[i][1];
                    r[k][2] = s1[i][2];
                    i++;
                    k++;
                } else {
                    r[k][0] = s2[j][0];
                    r[k][1] = s2[j][1];
                    r[k][2] = s2[j][2];
                    j++;
                    k++;
                }
            } else if (s1[i][0] < s2[j][0]) {
                r[k][0] = s1[i][0];
                r[k][1] = s1[i][1];
                r[k][2] = s1[i][2];
                i++;
                k++;
            } else {
                r[k][0] = s2[j][0];
                r[k][1] = s2[j][1];
                r[k][2] = s2[j][2];
                j++;
                k++;
            }
        }
        while (i <= s1[0][2]) {
            r[k][0] = s1[i][0];
            r[k][1] = s1[i][1];
            r[k][2] = s1[i][2];
            i++;
            k++;
        }
        while (j <= s2[0][2]) {
            r[k][0] = s2[j][0];
            r[k][1] = s2[j][1];
            r[k][2] = s2[j][2];
            j++;
            k++;
        }
        r[0][2] = k - 1;
        return k;
    } else {
        printf("Matrix addition cannot be performed\n");
        return -1;
    }
}

int transparse(int t[10][10], int s1[10][10]) {
    int i, j;
    t[0][0] = s1[0][1];
    t[0][1] = s1[0][0];
    t[0][2] = s1[0][2];
    int pos = 1;
    for (i = 0; i < s1[0][1]; i++) {
        for (j = 1; j <= s1[0][2]; j++) {
            if (s1[j][1] == i) {
                t[pos][0] = s1[j][1];
                t[pos][1] = s1[j][0];
                t[pos][2] = s1[j][2];
                pos++;
            }
        }
    }
    return pos;
}

int main() {
    int i, j, k;
    int a[10][10], b[10][10], r[10][10], sa[10][10], sb[10][10];
    int r1, c1, r2, c2, ka, kb, kr, kt1, kt2, su[10][10], st[10][10];
   
    printf("Enter rows and columns for first matrix: ");
    scanf("%d %d", &r1, &c1);
    creatematrix(a, r1, c1);
    displaymatrix(a, r1, c1);
   
    printf("Enter rows and columns for second matrix: ");
    scanf("%d %d", &r2, &c2);
    creatematrix(b, r2, c2);
    displaymatrix(b, r2, c2);
   
    int ch, n = 0;
    while (n == 0) {
        printf("MENU\n1.Tuple form\n2.Sum\n3.Transpose\n4.Exit\n");
        printf("Enter choice: ");
        scanf("%d", &ch);
       
        switch (ch) {
            case 1:
                printf("Tuple form of first matrix:\n");
                ka = createsparse(a, sa, r1, c1);
                displaymatrix(sa, ka, 3);
               
                printf("Tuple form of second matrix:\n");
                kb = createsparse(b, sb, r2, c2);
                displaymatrix(sb, kb, 3);
                break;
               
            case 2:
                kr = sparseadd(sa, sb, r);
                if (kr != -1) {
                    printf("Sum:\n");
                    displaymatrix(r, kr, 3);
                }
                break;
               
            case 3:
                printf("Transpose of first matrix:\n");
                kt1 = transparse(su, sa);
                displaymatrix(su, kt1, 3);
               
                printf("Transpose of second matrix:\n");
                kt2 = transparse(st, sb);
                displaymatrix(st, kt2, 3);
                break;
               
            case 4:
                n = 1;
                break;
               
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
   
    return 0;
}
