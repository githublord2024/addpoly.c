// Online C compiler to run C program online
#include <stdio.h>

#define MAX_SPARSE 100  // Max number of non-zero elements in the sparse matrix
#define MAX_SIZE 10     // Max dimensions for the original matrix

void Sparse(int A[MAX_SIZE][MAX_SIZE], int m, int n, int S[MAX_SPARSE][3]);
void AddSparse(int S[MAX_SPARSE][3], int T[MAX_SPARSE][3], int result[MAX_SIZE][MAX_SIZE]);
void ConvertToSparse(int M[MAX_SIZE][MAX_SIZE], int m, int n, int S[MAX_SPARSE][3]);
void PrintSparse(int S[MAX_SPARSE][3]);
void PrintMatrix(int M[MAX_SIZE][MAX_SIZE], int m, int n);
void TransposeMatrix(int A[MAX_SIZE][MAX_SIZE], int m, int n, int T[MAX_SIZE][MAX_SIZE]);

int main() {
    int A[MAX_SIZE][MAX_SIZE], B[MAX_SIZE][MAX_SIZE];
    int m1, n1, m2, n2;
    int S[MAX_SPARSE][3], T[MAX_SPARSE][3];
    int result[MAX_SIZE][MAX_SIZE] = {0}; // Initialize result matrix to 0
    int resultSparse[MAX_SPARSE][3];
    int choice;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Transpose of the matrix\n");
        printf("2. Addition of two matrices\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                // Input for the matrix
                printf("Enter the row and column of the matrix (max %d x %d): ", MAX_SIZE, MAX_SIZE);
                scanf("%d%d", &m1, &n1);
                if (m1 > MAX_SIZE || n1 > MAX_SIZE || m1 < 1 || n1 < 1) {
                    printf("Invalid matrix dimensions.\n");
                    continue;
                }
                printf("Enter the matrix elements:\n");
                for (int i = 0; i < m1; i++) {
                    for (int j = 0; j < n1; j++) {
                        scanf("%d", &A[i][j]);
                    }
                }

                printf("Matrix:\n");
                PrintMatrix(A, m1, n1);

                // Transpose the matrix
                int transposed[MAX_SIZE][MAX_SIZE];
                TransposeMatrix(A, m1, n1, transposed);

                printf("Transpose of Matrix:\n");
                PrintMatrix(transposed, n1, m1);

                // Convert to sparse tuple form
                Sparse(A, m1, n1, S);
                printf("Matrix in sparse (tuple) form:\n");
                PrintSparse(S);

                Sparse(transposed, n1, m1, T);
                printf("Transpose of Matrix in sparse (tuple) form:\n");
                PrintSparse(T);

                break;

            case 2:
                // Input for the first matrix
                printf("Enter the row and column of the first matrix (max %d x %d): ", MAX_SIZE, MAX_SIZE);
                scanf("%d%d", &m1, &n1);
                if (m1 > MAX_SIZE || n1 > MAX_SIZE || m1 < 1 || n1 < 1) {
                    printf("Invalid matrix dimensions.\n");
                    continue;
                }
                printf("Enter the matrix elements:\n");
                for (int i = 0; i < m1; i++) {
                    for (int j = 0; j < n1; j++) {
                        scanf("%d", &A[i][j]);
                    }
                }

                printf("Matrix 1:\n");
                PrintMatrix(A, m1, n1);

                // Input for the second matrix
                printf("Enter the row and column of the second matrix (max %d x %d): ", MAX_SIZE, MAX_SIZE);
                scanf("%d%d", &m2, &n2);
                if (m2 > MAX_SIZE || n2 > MAX_SIZE || m2 < 1 || n2 < 1) {
                    printf("Invalid matrix dimensions.\n");
                    continue;
                }
                printf("Enter the matrix elements:\n");
                for (int i = 0; i < m2; i++) {
                    for (int j = 0; j < n2; j++) {
                        scanf("%d", &B[i][j]);
                    }
                }

                printf("Matrix 2:\n");
                PrintMatrix(B, m2, n2);

                Sparse(A, m1, n1, S);
                Sparse(B, m2, n2, T);

                // Adding sparse matrices and storing result in normal form
                if (m1 == m2 && n1 == n2) {
                    AddSparse(S, T, result);
                    
                    // Print result matrix in normal form
                    printf("Sum of matrices in normal form:\n");
                    PrintMatrix(result, m1, n1);
                    
                    // Convert result matrix to sparse form
                    ConvertToSparse(result, m1, n1, resultSparse);

                    // Print result matrix in sparse form
                    printf("Sum of matrices in sparse (tuple) form:\n");
                    PrintSparse(resultSparse);
                } else {
                    printf("Incompatible matrix sizes for addition.\n");
                }

                break;

            case 3:
                printf("Exiting...\n");
                return 0;

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void Sparse(int A[MAX_SIZE][MAX_SIZE], int m, int n, int S[MAX_SPARSE][3]) {
    int k = 1;
    S[0][0] = m; 
    S[0][1] = n;
    S[0][2] = 0;  // Number of non-zero elements

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (A[i][j] != 0) {
                if (k >= MAX_SPARSE) {
                    printf("Error: Sparse matrix size exceeds the limit.\n");
                    return;
                }
                S[k][0] = i;
                S[k][1] = j;
                S[k][2] = A[i][j];
                k++;
                S[0][2]++;
            }
        }
    }

    PrintSparse(S);
}

void AddSparse(int S[MAX_SPARSE][3], int T[MAX_SPARSE][3], int result[MAX_SIZE][MAX_SIZE]) {
    int r1 = S[0][0], c1 = S[0][1];
    int r2 = T[0][0], c2 = T[0][1];

    if (r1 != r2 || c1 != c2) {
        printf("Incompatible matrix size\n");
        return;
    }

    int i = 1, j = 1;

    while (i <= S[0][2] || j <= T[0][2]) {
        if (i <= S[0][2] && (j > T[0][2] || S[i][0] < T[j][0] || (S[i][0] == T[j][0] && S[i][1] < T[j][1]))) {
            result[S[i][0]][S[i][1]] += S[i][2];
            i++;
        } else if (j <= T[0][2] && (i > S[0][2] || T[j][0] < S[i][0] || (T[j][0] == S[i][0] && T[j][1] < S[i][1]))) {
            result[T[j][0]][T[j][1]] += T[j][2];
            j++;
        } else if (i <= S[0][2] && j <= T[0][2] && S[i][0] == T[j][0] && S[i][1] == T[j][1]) {
            result[S[i][0]][S[i][1]] += S[i][2] + T[j][2];
            i++;
            j++;
        }
    }
}

void ConvertToSparse(int M[MAX_SIZE][MAX_SIZE], int m, int n, int S[MAX_SPARSE][3]) {
    int k = 1;
    S[0][0] = m; 
    S[0][1] = n;
    S[0][2] = 0;  // Number of non-zero elements

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (M[i][j] != 0) {
                if (k >= MAX_SPARSE) {
                    printf("Error: Sparse matrix size exceeds the limit.\n");
                    return;
                }
                S[k][0] = i;
                S[k][1] = j;
                S[k][2] = M[i][j];
                k++;
                S[0][2]++;
            }
        }
    }

    PrintSparse(S);
}

void PrintSparse(int S[MAX_SPARSE][3]) {
    printf("Rows: %d, Columns: %d, Non-zero terms: %d\n", S[0][0], S[0][1], S[0][2]);
    printf("Row\tCol\tValue\n");
    for (int i = 1; i <= S[0][2]; i++) {
        printf("%d\t%d\t%d\n", S[i][0], S[i][1], S[i][2]);
    }
}

void PrintMatrix(int M[MAX_SIZE][MAX_SIZE], int m, int n) {
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", M[i][j]);
        }
        printf("\n");
    }
}

void TransposeMatrix(int A[MAX_SIZE][MAX_SIZE], int m, int n, int T[MAX_SIZE][MAX_SIZE]) {
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            T[j][i] = A[i][j];
        }
    }
}
